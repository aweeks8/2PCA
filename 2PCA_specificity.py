#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sat Feb  4 19:11:16 2023

@author: Amy
"""

import csv
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

'''
Starting from a comprehensive enhanced annotation PD output peptide groups csv file, make a list of all peptides, and all peptides 
with a user-defined N-terminal modification. 

Inputs required are filename and modification (e.g. '2PCA'). Outputs are two lists: peptidelist (containing all peptides in the PD csv file),
and peptidelist_Mod (containing a list of the modified peptides only)
'''



def readNtermMod(file, modification):
    filename = file
    peptidelist = []
    peptidelist_Mod = []
    mod = modification
    
    with open(filename, "r") as fileA:
        reader = csv.reader(fileA)
        next(reader)
        for row in reader:
            peptidelist.append(row[2])
            if mod in row[3]:
                peptidelist_Mod.append(row[2])
    return (peptidelist, peptidelist_Mod)

'''
Starting from a list of peptide sequences like the ones generated by readNtermMod, trim all sequences to a specified number of amino acids
(Default is 6, but this can be changed by providing a different number as input)

Required input is a list of peptides. Output is a list of N-terminal sequences trimmed to 6 (or another specified number of) amino acids
'''

def alignNTermini(inputlist, number=6):
    
    peptidesequences = []
    
    for row in inputlist:
        input_peptide = row.split('.')[1]
        peptidesequences.append(input_peptide[0:6])
    return peptidesequences

'''
Starting from a list of peptide sequences like the ones generated by readNtermMod, trim all sequences to a specified number of amino acids
(Default is 6, but this can be changed by providing a different number as input)

Required input is a list of peptides. Output is a list of C-terminal sequences trimmed to 6 (or another specified number of) amino acids
'''

def alignCTermini(inputlist, number=6):
    
    peptidesequences = []
    
    for row in inputlist:
        input_peptide = row.split('.')[1]
        peptidesequences.append(input_peptide[-6:])
    return peptidesequences

'''
Starting from an aligned/trimmed list of peptides, count the occurence of each amino acid in each position. Required input is a list
of peptides that are all the same length (like the output of alignNTermini). Output is a 20 x length array with the count of each of the
20 amino acids in each position.
'''
def countNtermAAOccurence(inputlist):
    aminoacids = ['A', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'K', 'L', 'M', 'N', 'P', 'Q', 'R', 'S', 'T', 'V', 'W', 'Y']
    val = 0
    aminoDict=dict()
    for AA in aminoacids:
    	aminoDict[AA] = val
    	val += 1
    
    length = len(inputlist[1])
    

    
    modcount = np.zeros((20,length))
        
    for site in inputlist:
        for i in range(0,length):
            try:
                modcount[aminoDict[site[i]]][i] +=1
            except:
                pass
    return modcount

'''
Calculate z-scores given two input arrays (e.g., one that count amino acid occurence in modified peptides and one that counts amino acid
occurence in all peptides in a sample)

Required inputs are two arrays of the same size (sample and control). Output is an array of z-scores. This is also written to a file called
output.csv that will be overwritten everytime this function is used. Need to either rename the file or change the function if you want to keep
each file.
'''

def standardScore2(sample, control): #sample and control are arrays
    sampletotal = np.sum(sample, axis=0) #axis=0 sums the columns, axis=1 sums over rows
    samplefreq = sample/sampletotal
    controltotal = np.sum(control, axis=0)
    controlfreq = control/controltotal
    stderror = np.sqrt(controlfreq*(1-controlfreq)*((1/sampletotal)))
    zscore = ((samplefreq-controlfreq)/stderror)
    np.savetxt('output.csv', zscore, delimiter = ',', newline='\n') #saves a csv file with the calculated zscores
    return zscore



'''
Plot the z-scores generated by standardScore2 as a heatmap. Required inputs are an array of z-scores and a pdf filename. Output is a pdf
of the heatmap.
'''
def plotZscoreHeatmap(inputarray, pdfname):
    aminoacids = ['A', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'K', 'L', 'M', 'N', 'P', 'Q', 'R', 'S', 'T', 'V', 'W', 'Y']
    maxvalue=np.nanmax(inputarray)
    minvalue=np.nanmin(inputarray)
    
    #set axis limits for heatmap so that 0 (i.e., no enrichment or deenrichment) is white
    if abs(maxvalue) > abs(minvalue):
        highlim=abs(maxvalue)
        lowlim=-highlim
    elif abs(minvalue) > abs(maxvalue):
        highlim=abs(minvalue)
        lowlim=-highlim
    
    #plot figure and save as pdf
    fig, ax = plt.subplots()
    ax = sns.heatmap(inputarray, vmin=lowlim, vmax=highlim, yticklabels=aminoacids, square=True, cmap='RdBu', clim=(-20,20))
    
    #rotate amino acid labels
    plt.yticks(rotation=0)
    
    #next two lines expand x and y limits so boxes aren't cut off at the top and bottom
    bottom, top = ax.get_ylim()
    ax.set_ylim(bottom + 0.5, top - 0.5)
    
    #save heatmap as pdf
    fig.savefig(pdfname) #can change the name here
    
'''
From a list of peptides, count each of the 400 possible N-terminal dipeptides and save the results as a 20 x 20 array. Can use these arrays
for calculating z-scores. 

Required input is a list of peptide sequenes. Output is an array of counts.
'''
def NTermDipeptideCount(inputlist):
    aminoacids = ['A', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'K', 'L', 'M', 'N', 'P', 'Q', 'R', 'S', 'T', 'V', 'W', 'Y']
    val = 0
    aminoDict=dict()
    for AA in aminoacids:
        aminoDict[AA]=val
        val+=1
    modcount = np.zeros((20,20))
    for site in inputlist:
        modcount[aminoDict[site[1]]][aminoDict[site[0]]]+=1
    
    return modcount

'''
Plot a clustermap for an array of z-scores. Inputs same as for plotting unclustered heatmap.
'''

def plotZscoreClustermap(inputarray, pdfname):
    aminoacids = ['A', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'K', 'L', 'M', 'N', 'P', 'Q', 'R', 'S', 'T', 'V', 'W', 'Y']
    maxvalue=np.nanmax(inputarray)
    minvalue=np.nanmin(inputarray)
    
    #set axis limits for heatmap so that 0 (i.e., no enrichment or deenrichment) is white
    if abs(maxvalue) > abs(minvalue):
        highlim=abs(maxvalue)
        lowlim=-highlim
    elif abs(minvalue) > abs(maxvalue):
        highlim=abs(minvalue)
        lowlim=-highlim
    
    #plot figure and save as pdf
    fig, ax = plt.subplots()
    ax = sns.clustermap(inputarray, vmin=lowlim, vmax=highlim, yticklabels=aminoacids, square=True, cmap='RdBu', clim=(-20,20))
    
    
    #save heatmap as pdf
    plt.savefig(pdfname) #can change the name here
    

'''
Examples of how to use these different functions. 
'''

'''
Unmodified peptide libraries
'''
#chymotrypsin library

chymolist, chymolist_2PCA = readNtermMod('E20220309-02.csv', '2PCA')

chymo_all_Nterm = alignNTermini(chymolist)

chymo_all_Cterm = alignCTermini(chymolist)

chymo_totalcount = countNtermAAOccurence(chymo_all_Nterm)

with open('E20220309-02_Cterm.txt', 'w') as f:
    for line in chymo_all_Cterm:
        f.write(f"{line}\n")

#GluC library
        
gluclist, gluclist_2PCA = readNtermMod('E20220309-04.csv', '2PCA')

gluc_all_Nterm = alignNTermini(gluclist)

gluc_all_Cterm = alignCTermini(gluclist)

gluc_totalcount = countNtermAAOccurence(gluc_all_Nterm)

with open('E20220309-04_Cterm.txt', 'w') as f:
    for line in gluc_all_Cterm:
        f.write(f"{line}\n")

with open('E20220309-04_Nterm.txt', 'w') as f:
    for line in gluc_all_Nterm:
        f.write(f"{line}\n")

#trypsin library
        
tryplist, tryplist_2PCA = readNtermMod('E20220309-06.csv', '2PCA')

tryp_all_Nterm = alignNTermini(tryplist)

tryp_all_Cterm = alignCTermini(tryplist)

tryp_totalcount = countNtermAAOccurence(tryp_all_Nterm)

with open('E20220309-06_Cterm.txt', 'w') as f:
    for line in tryp_all_Cterm:
        f.write(f"{line}\n")

with open('E20220309-06_Nterm.txt', 'w') as f:
    for line in tryp_all_Nterm:
        f.write(f"{line}\n")

#human trypsin library
        
tryplist, tryplist_2PCA = readNtermMod('E20210711-03.csv', '2PCA')

tryp_all_Nterm = alignNTermini(tryplist)

tryp_all_Cterm = alignCTermini(tryplist)

tryp_totalcount = countNtermAAOccurence(tryp_all_Nterm)

with open('E20210711-03_Cterm.txt', 'w') as f:
    for line in tryp_all_Cterm:
        f.write(f"{line}\n")

with open('E20210711-03_Nterm.txt', 'w') as f:
    for line in tryp_all_Nterm:
        f.write(f"{line}\n")


#human chymotrypsin library

chymolist, chymolist_2PCA = readNtermMod('E20210711-05.csv', '2PCA')

chymo_all_Nterm = alignNTermini(chymolist)

chymo_all_Cterm = alignCTermini(chymolist)

chymo_totalcount = countNtermAAOccurence(chymo_all_Nterm)

with open('E20210711-05_Cterm.txt', 'w') as f:
    for line in chymo_all_Cterm:
        f.write(f"{line}\n")

with open('E20210711-05_Nterm.txt', 'w') as f:
    for line in chymo_all_Nterm:
        f.write(f"{line}\n")

#human GluC library
        
gluclist, gluclist_2PCA = readNtermMod('E20210711-07.csv', '2PCA')

gluc_all_Nterm = alignNTermini(gluclist)

gluc_all_Cterm = alignCTermini(gluclist)

gluc_totalcount = countNtermAAOccurence(gluc_all_Nterm)

with open('E20210711-07_Cterm.txt', 'w') as f:
    for line in gluc_all_Cterm:
        f.write(f"{line}\n")

with open('E20210711-07_Nterm.txt', 'w') as f:
    for line in gluc_all_Nterm:
        f.write(f"{line}\n")
    

'''
2PCA-modified peptide libraries
'''

#chymotrypsin library

chymolist, chymolist_2PCA = readNtermMod('E20210902-21.csv', '2PCA')

chymo_all_Nterm = alignNTermini(chymolist)

chymo_PCA_Nterm = alignNTermini(chymolist_2PCA)

chymo_PCA_count = countNtermAAOccurence(chymo_PCA_Nterm)

chymo_totalcount = countNtermAAOccurence(chymo_all_Nterm)

chymoscores = standardScore2(chymo_PCA_count, chymo_totalcount)

plot = plotZscoreHeatmap(chymoscores, 'E20210902-21_heatmap.pdf')


#GluC library

GluClist, GluClist_2PCA = readNtermMod('E20210828-15.csv', '2PCA')

GluC_all_Nterm = alignNTermini(GluClist)

GluC_PCA_Nterm = alignNTermini(GluClist_2PCA)

GluC_PCA_count = countNtermAAOccurence(GluC_PCA_Nterm)

GluC_totalcount = countNtermAAOccurence(GluC_all_Nterm)

GluCscores = standardScore2(GluC_PCA_count, GluC_totalcount)

plot = plotZscoreHeatmap(GluCscores, 'E20210828-15_heatmap.pdf')

#trypsin library

tryplist, tryplist_2PCA = readNtermMod('E20210730-15.csv', '2PCA')

tryp_all_Nterm = alignNTermini(tryplist)

tryp_PCA_Nterm = alignNTermini(tryplist_2PCA)

tryp_PCA_count = countNtermAAOccurence(tryp_PCA_Nterm)

tryp_totalcount = countNtermAAOccurence(tryp_all_Nterm)

trypscores = standardScore2(tryp_PCA_count, tryp_totalcount)

plot = plotZscoreHeatmap(trypscores, 'E20210730-15_heatmap.pdf')

#concatenated experiments

all_Nterm = chymo_all_Nterm + GluC_all_Nterm + tryp_all_Nterm

PCA_Nterm = chymo_PCA_Nterm + GluC_PCA_Nterm + tryp_PCA_Nterm

PCA_count = countNtermAAOccurence(PCA_Nterm)

totalcount = countNtermAAOccurence(all_Nterm)

scores = standardScore2(PCA_count, totalcount)

plot = plotZscoreHeatmap(scores, '20210120_10mM2PCA_4h_37_heatmap.pdf')

#dipeptide heatmap

dipeptide_PCA = NTermDipeptideCount(PCA_Nterm)

dipeptide_total = NTermDipeptideCount(all_Nterm)

dipeptidescores = standardScore2(dipeptide_PCA, dipeptide_total)

dipeptide_plot = plotZscoreHeatmap(dipeptidescores, '20210120_10mM2PCA_4h_37_heatmap_dipeptide.pdf')

dipeptidescores_mask = np.nan_to_num(dipeptidescores, nan = 0.006) #nan values aren't allowed in clustermap. Set these to a finite value, then changed them to gray boxes manually


#alkyne-2PCA-modified library

tryplist, tryplist_2PCA = readNtermMod('E20211109-05.csv', '1xalkyne 2PCA [N-Term]')

tryp_all_Nterm = alignNTermini(tryplist)

tryp_PCA_Nterm = alignNTermini(tryplist_2PCA)

tryp_PCA_count = countNtermAAOccurence(tryp_PCA_Nterm)

tryp_totalcount = countNtermAAOccurence(tryp_all_Nterm)

trypscores = standardScore2(tryp_PCA_count, tryp_totalcount)

plot = plotZscoreHeatmap(trypscores, 'E20211109-05_heatmap.pdf')